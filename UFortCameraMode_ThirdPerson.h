// Class /Script/FortniteGame.FortCameraMode_ThirdPerson
// Size: 0x1b20
class UFortCameraMode_ThirdPerson : public UFortCameraMode
{
	float FOV; // 0x58 (0x4)
	float CameraSpaceForwardDistance; // 0x5c (0x4)
	bool bClampCameraPitch; // 0x60 (0x1)
	bool bClampCameraYaw; // 0x61 (0x1)
	unsigned char unreflected_62[0x2]; // 0x62 (0x2) 
	float CameraPitchMin; // 0x64 (0x4)
	float CameraPitchMax; // 0x68 (0x4)
	float CameraYawMin; // 0x6c (0x4)
	float CameraYawMax; // 0x70 (0x4)
	struct TEnumAsByte<ECameraOrigin> CameraOrigin; // 0x74 (0x1)
	unsigned char unreflected_75[0x3]; // 0x75 (0x3) 
	struct FName CameraOriginSocketName; // 0x78 (0x4)
	unsigned char unreflected_7c[0x4]; // 0x7c (0x4) 
	struct FVector CameraOriginInterpSpeed; // 0x80 (0x18)
	struct FBox CameraLocationErrorConstraintBox; // 0x98 (0x38)
	struct FInterpOffset ViewTargetSpaceViewOffset; // 0xd0 (0x10)
	struct FInterpOffset ViewTargetSpaceViewOffsetCrouch; // 0xe0 (0x10)
	struct FVector ViewTargetSpaceViewOffseInterpSpeed; // 0xf0 (0x18)
	struct FInterpOffset CameraSpaceViewOffset; // 0x108 (0x10)
	float ViewTargetAlignmentFlipInterpDuration; // 0x118 (0x4)
	bool bScaleViewOffsetByViewTargetScale; // 0x11c (0x1)
	bool bSupportsShoulderSwap; // 0x11d (0x1)
	unsigned char unreflected_11e[0x2]; // 0x11e (0x2) 
	unsigned char bControlsWeaponTransform; // 0x120 (0x1)
	unsigned char unreflected_121[0x7]; // 0x121 (0x7) 
	struct FFortOpticConfig OpticConfig; // 0x128 (0x38)
	struct FFortAimedObjectConfig AimedObjectConfig; // 0x160 (0x40)
	bool bControlsWeaponTransformOnTargetingOnly; // 0x1a0 (0x1)
	unsigned char unreflected_1a1[0x7]; // 0x1a1 (0x7) 
	class UFortFirstPersonState* FirstPersonState; // 0x1a8 (0x8)
	unsigned char unreflected_1b0[0x68]; // 0x1b0 (0x68) 
	struct TArray<class UFirstPersonUpdateFunction*> FirstPersonUpdateFunctions; // 0x218 (0x10)
	struct FVector LastCameraOrigin; // 0x228 (0x18)
	struct FVector CameraOriginLocalOffset; // 0x240 (0x18)
	float PenetrationBlendInTime; // 0x258 (0x4)
	float PenetrationBlendOutTime; // 0x25c (0x4)
	bool bPreventPenetration; // 0x260 (0x1)
	bool bDoPredictiveAvoidance; // 0x261 (0x1)
	unsigned char unreflected_262[0x2]; // 0x262 (0x2) 
	float CollisionPushOutDistance; // 0x264 (0x4)
	float HidePawnPenetrationPercent; // 0x268 (0x4)
	bool bHidePawnWhileNotFullyWeighted; // 0x26c (0x1)
	unsigned char unreflected_26d[0x63]; // 0x26d (0x63) 
	struct FName LastAttachSocketName; // 0x2d0 (0x4)
	unsigned char unreflected_2d4[0xc]; // 0x2d4 (0xc) 
	struct FMinimalViewInfo LastBasePOV; // 0x2e0 (0x7c0)
	struct FMinimalViewInfo DeltaBasePOV; // 0xaa0 (0x7c0)
	float BlendAlpha; // 0x1260 (0x4)
	unsigned char unreflected_1264[0x14]; // 0x1264 (0x14) 
	struct TArray<struct FPenetrationAvoidanceFeeler> PenetrationAvoidanceFeelers; // 0x1278 (0x10)
	float SafeLocToAimLineBlockedPct; // 0x1288 (0x4)
	float AimLineToDesiredPosBlockedPct; // 0x128c (0x4)
	float LastDrawDebugTime; // 0x1290 (0x4)
	unsigned char unreflected_1294[0x4]; // 0x1294 (0x4) 
	struct FVector LastViewTargetSpaceViewOffset; // 0x1298 (0x18)
	struct FVector LastViewTargetAlignmentUp; // 0x12b0 (0x18)
	float ViewTargetAlignmentFlipInterpTime; // 0x12c8 (0x4)
	unsigned char unreflected_12cc[0x4]; // 0x12cc (0x4) 
	struct FVector LastCameraPivot; // 0x12d0 (0x18)
	float CachedPitchLimitMin; // 0x12e8 (0x4)
	float CachedPitchLimitMax; // 0x12ec (0x4)
	float CachedYawLimitMin; // 0x12f0 (0x4)
	float CachedYawLimitMax; // 0x12f4 (0x4)
	bool bLastViewTargetValidGroupEmoteLookTarget; // 0x12f8 (0x1)
	unsigned char unreflected_12f9[0x7]; // 0x12f9 (0x7) 
	class AActor* IgnoreActorForCameraPenetration; // 0x1300 (0x8)
	struct TArray<class AActor*> DebugActorsHitDuringCameraPenetration; // 0x1308 (0x10)
	unsigned char bWasInVehicle; // 0x1318 (0x1)
	unsigned char unreflected_1319[0x7]; // 0x1319 (0x7) 
	class AActor* PreviousIgnoreActorForCameraPenetration; // 0x1320 (0x8)
	unsigned char unreflected_1328[0x8]; // 0x1328 (0x8) 
	struct FTViewTarget PreviousVT; // 0x1330 (0x7e0)
	bool bIsActive; // 0x1b10 (0x1)
	bool bLockCameraWhileInactive; // 0x1b11 (0x1)
	unsigned char padding_1b12[0xe]; // 0x1b12 (0xe)
};

