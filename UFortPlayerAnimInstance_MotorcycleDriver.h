// Class /Script/MotorcycleRuntime.FortPlayerAnimInstance_MotorcycleDriver
// Size: 0x910
class UFortPlayerAnimInstance_MotorcycleDriver : public UFortPlayerAnimInstance_MotorcycleRider
{
	bool bHasMoved; // 0x850 (0x1)
	unsigned char unreflected_851[0x3]; // 0x851 (0x3) 
	float SteeringRotation; // 0x854 (0x4)
	bool bIsInInventoryMode; // 0x858 (0x1)
	bool bShouldJump; // 0x859 (0x1)
	bool bShouldAllowHeadAO; // 0x85a (0x1)
	unsigned char unreflected_85b[0x1]; // 0x85b (0x1) 
	float FeetDragPlayRate; // 0x85c (0x4)
	bool bShouldJumpCharge; // 0x860 (0x1)
	bool bIsLandingInPlace; // 0x861 (0x1)
	bool bStateRuleFallingToMoving; // 0x862 (0x1)
	bool bShouldApplyChargingNoise; // 0x863 (0x1)
	float JumpTimer; // 0x864 (0x4)
	bool bShouldAllowJump; // 0x868 (0x1)
	bool bIsSurfaceWater; // 0x869 (0x1)
	bool bSlopeAlphaShouldIncrease; // 0x86a (0x1)
	unsigned char unreflected_86b[0x1]; // 0x86b (0x1) 
	float SlopeAlpha; // 0x86c (0x4)
	bool bHasPassenger; // 0x870 (0x1)
	bool bIsOneHandedDualWield; // 0x871 (0x1)
	bool bShouldApplyBodyTwistForMelee; // 0x872 (0x1)
	bool bIsMelee; // 0x873 (0x1)
	bool bIsRangedOrConsumable; // 0x874 (0x1)
	bool bShouldApplyFeetNoise; // 0x875 (0x1)
	unsigned char unreflected_876[0x2]; // 0x876 (0x2) 
	float CachedFallingStartTime; // 0x878 (0x4)
	bool bWasFalling; // 0x87c (0x1)
	bool bIsRevving; // 0x87d (0x1)
	unsigned char unreflected_87e[0x2]; // 0x87e (0x2) 
	float StoppieLeanAlpha; // 0x880 (0x4)
	bool bShouldPlayMovingJump; // 0x884 (0x1)
	bool bWasJumpTrickLeftOrRight; // 0x885 (0x1)
	bool bIsFromJumpTrick; // 0x886 (0x1)
	bool bShouldAllowMovingJumpLand; // 0x887 (0x1)
	bool bStateTransitionRuleToReverseLoop; // 0x888 (0x1)
	bool bIsReverseNoFeet; // 0x889 (0x1)
	unsigned char unreflected_88a[0x2]; // 0x88a (0x2) 
	float WalkSPlayRate; // 0x88c (0x4)
	float LeanSpeed; // 0x890 (0x4)
	float LeanAlpha; // 0x894 (0x4)
	bool bIsCombatTransition; // 0x898 (0x1)
	bool bShouldBrake; // 0x899 (0x1)
	bool bShouldExitFromLocomotion; // 0x89a (0x1)
	bool bEarlyOutBrakingOutro; // 0x89b (0x1)
	bool bIsRightInput; // 0x89c (0x1)
	bool bShouldPlayReverseOutro; // 0x89d (0x1)
	bool bShouldApplyHipSuspension; // 0x89e (0x1)
	bool bIsDefaultJumpTrick; // 0x89f (0x1)
	bool bIsLeftJumpTrick; // 0x8a0 (0x1)
	bool bIsRightJumpTrick; // 0x8a1 (0x1)
	bool bIsNoneJumpTrick; // 0x8a2 (0x1)
	bool bIsSoloJumpTrick; // 0x8a3 (0x1)
	bool bShouldExitFromDefaultJumpTrick; // 0x8a4 (0x1)
	bool bEarlyOutFromMoveStart; // 0x8a5 (0x1)
	bool bShouldStop; // 0x8a6 (0x1)
	unsigned char unreflected_8a7[0x1]; // 0x8a7 (0x1) 
	float CachedTrickIntroTime; // 0x8a8 (0x4)
	bool bShouldPlayJumpTrickIntroLeft; // 0x8ac (0x1)
	bool bShouldPlayJumpTrickIntroRight; // 0x8ad (0x1)
	bool bStateRuleNeutralToJumpTrickLeft; // 0x8ae (0x1)
	bool bStateRuleNeutralToJumpTrickRight; // 0x8af (0x1)
	bool bShouldJumpTrick; // 0x8b0 (0x1)
	bool bHasJumpChargeStarted; // 0x8b1 (0x1)
	bool bIsJumpTrickLanding; // 0x8b2 (0x1)
	bool bWasSoloJumping; // 0x8b3 (0x1)
	bool bWasStoppieLanding; // 0x8b4 (0x1)
	unsigned char unreflected_8b5[0x3]; // 0x8b5 (0x3) 
	float UpperBodyBlendAlpha; // 0x8b8 (0x4)
	float StoredJumpTrickIntroPosition; // 0x8bc (0x4)
	float JumpTrickIntroPosition; // 0x8c0 (0x4)
	float JumpChargeLegIKAlpha; // 0x8c4 (0x4)
	struct FSoftObjectPath ScytheMontage; // 0x8c8 (0x18)
	struct FName JumpTrickIntroPositionCurveName; // 0x8e0 (0x4)
	struct FCachedAnimRelevancyData FallStartCachedTime; // 0x8e4 (0x14)
	struct FCachedAnimRelevancyData TrickCachedTime; // 0x8f8 (0x14)
	unsigned char padding_90c[0x4]; // 0x90c (0x4)
};

